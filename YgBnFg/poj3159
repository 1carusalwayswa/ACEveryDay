#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdio>
#include<string>
#include<vector>
#include<queue>
#include<cmath>
#include<stack>
#include<set>
#include<map>
#define INF 0x3f3f3f3f
#define Mn 30010
#define Mm 150005
#define mod 1000000007
#define CLR(a,b) memset((a),(b),sizeof((a)))
#define CPY(a,b) memcpy ((a), (b), sizeof((a)))
#pragma comment(linker, "/STACK:102400000,102400000")
#define ul u<<1
#define ur (u<<1)|1
using namespace std;
typedef long long ll;
int dis[Mn];
int vis[Mn];
int n,m;
struct edge {
    int v,w,next;
}e[Mm];
int tot,head[Mn];
struct node {
    int v;
    int cost;
    node(int v,int cost) : v(v),cost(cost) {};
    bool operator <(const node x) const {
        return cost>x.cost;
    }
};
void addedge(int u,int v,int w) {
    e[tot].v=v;
    e[tot].w=w;
    e[tot].next=head[u];;
    head[u]=tot++;
}
void dijkstra(int st) {
    priority_queue<node> q;
    CLR(dis,0x3f);
    CLR(vis,0);
    dis[st]=0;
    q.push(node(st,0));
    while(!q.empty()) {
        node tmp=q.top();
        q.pop();
        int u=tmp.v;
        if(vis[u]) continue;
        vis[u]=1;
        for(int i=head[u]; i!=-1; i=e[i].next) {
            int v=e[i].v;
            int cost=e[i].w;
            if(!vis[v]&&dis[v]>dis[u]+cost) {
                dis[v]=dis[u]+cost;
                q.push(node(v,dis[v]));
            }
        }
    }
}
void init() {
    tot=0;
    CLR(head,-1);
}
int main() {
    int n,m;
    while(~scanf("%d%d",&n,&m)) {
        init();
        for(int i=1;i<=m;i++) {
            int u,v,w;
            scanf("%d%d%d",&u,&v,&w);
            addedge(u,v,w);
        }
        dijkstra(1);
        printf("%d\n",dis[n]);
    }
    return 0;
}
